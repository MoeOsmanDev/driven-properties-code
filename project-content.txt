----- FILE: app\globals.css -----

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



----- FILE: app\layout.tsx -----

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Multi-Step Form - Next.js 15',
  description: 'Advanced schema-driven multi-step form with TypeScript',
};

/**
 * Root layout component for the Next.js application
 * Provides global styling and font configuration
 */
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang='en'>
      <body className={inter.className}>
        <main className='min-h-screen bg-gradient-to-br from-slate-50 to-slate-100'>
          {children}
        </main>
      </body>
    </html>
  );
}



----- FILE: app\page.tsx -----

import { MultiStepForm } from '@/components/forms/MultiStepForm';

export default function Home() {
  return (
    <div className='min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-800 relative overflow-hidden'>
      {/* Background decorative elements */}
      <div className='absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-blue-400/20 via-transparent to-transparent'></div>
      <div className='absolute -top-40 -right-40 w-96 h-96 bg-gradient-to-br from-blue-500/30 to-cyan-400/20 rounded-full blur-3xl'></div>
      <div className='absolute -bottom-40 -left-40 w-96 h-96 bg-gradient-to-br from-indigo-500/20 to-blue-400/10 rounded-full blur-3xl'></div>

      <div className='relative w-full min-h-screen px-3 sm:px-4 py-6 sm:py-8'>
        <div className='w-full max-w-full sm:max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto'>
          <div className='text-center mb-8 sm:mb-12'>
            <h1 className='text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-white via-blue-100 to-cyan-200 bg-clip-text text-transparent mb-4 tracking-tight'>
              Property Registration
            </h1>
            <p className='text-base sm:text-lg text-blue-100/80 max-w-2xl mx-auto leading-relaxed'>
              Complete your property registration in a few simple steps with our
              modern, secure platform
            </p>
            {/* Decorative line */}
            <div className='w-24 h-1 bg-gradient-to-r from-blue-400 to-cyan-400 mx-auto mt-6 rounded-full'></div>
          </div>
          <MultiStepForm />
        </div>
      </div>
    </div>
  );
}



----- FILE: components\forms\animations\slideVariants.ts -----

export const slideVariants = {
  enter: (direction: number) => ({
    x: direction > 0 ? 300 : -300,
    opacity: 0,
  }),
  center: {
    zIndex: 1,
    x: 0,
    opacity: 1,
  },
  exit: (direction: number) => ({
    zIndex: 0,
    x: direction < 0 ? 300 : -300,
    opacity: 0,
  }),
};



----- FILE: components\forms\FormField\FormField.tsx -----

'use client';

import React from 'react';

import { FieldGroup } from './inputs/FieldGroup';
import { InputCheckbox } from './inputs/InputCheckbox';
import { InputDate } from './inputs/InputDate';
import { InputNumber } from './inputs/InputNumber';
import { InputRadio } from './inputs/InputRadio';
import { InputSelect } from './inputs/InputSelect';
import { InputText } from './inputs/InputText';
import { UnsupportedField } from './UnsupportedField';

import { FormField as FormFieldType } from '@/lib/types';
import { FormFieldProps } from './types';

export const FormField: React.FC<FormFieldProps> = React.memo(
  ({ field, formData, onUpdate, parentPath = '' }) => {
    /* -------------------------
        1. Derived identifiers
     ------------------------- */
    const fieldPath = parentPath ? `${parentPath}.${field.key}` : field.key;

    /* -------------------------
         2. Get field value
     ------------------------- */
    const getValue = (path: string) => {
      return path.split('.').reduce((current, key) => current?.[key], formData);
    };

    const value = getValue(fieldPath);

    /* -------------------------
         3. Field options
     ------------------------- */
    const fieldOptions = (() => {
      // If field has static options, use them
      if (field.options) {
        return field.options;
      }

      // If field has optionSource, get options based on dependency value
      if (field.optionSource) {
        const dependencyValue = getValue(field.optionSource.key);
        dependencyValue;

        if (
          dependencyValue &&
          typeof dependencyValue === 'string' &&
          field.optionSource.map[dependencyValue]
        ) {
          const options = field.optionSource.map[dependencyValue];
          return options;
        }
        return [];
      }

      return [];
    })();

    /* -------------------------
         4. Field visibility
     ------------------------- */
    const isVisible = (() => {
      // If no dependencies, field is always visible
      if (!field.dependencies || field.dependencies.length === 0) {
        return true;
      }

      // Check all dependencies
      const dependenciesMet = field.dependencies.every(dep => {
        if (dep.equals !== undefined) {
          const depValue = getValue(dep.key);
          // Safe comparison - check if both values are the same type and value
          const result = (depValue as any) === (dep.equals as any);
          return result;
        }
        if (dep.notEmpty !== undefined) {
          const value = getValue(dep.key);
          // Safe empty check - ensure value exists and is not empty string
          const result = dep.notEmpty
            ? value && typeof value === 'string' && value !== ''
            : true;
          return result;
        }
        return true;
      });

      return dependenciesMet;
    })();

    /* -------------------------
         5. Visibility check
     ------------------------- */
    if (!isVisible) return null;

    /* -------------------------
         6. Change handler
     ------------------------- */
    const handleChange = (newValue: any) => {
      onUpdate(fieldPath, newValue);
    };

    /* -------------------------
         7. Render field based on type
     ------------------------- */
    const renderField = (() => {
      switch (field.type) {
        case 'text':
          return (
            <InputText
              id={fieldPath as string}
              defaultValue={(typeof value === 'string' ? value : '') as string}
              onCommit={handleChange as (val: string) => void}
              placeholder={`Enter ${field.label.toLowerCase()}` as string}
              autoComplete={(field.key === 'email' ? 'email' : 'off') as string}
            />
          );

        case 'number':
          return (
            <InputNumber
              id={fieldPath as string}
              value={
                (typeof value === 'number' || typeof value === 'string'
                  ? value
                  : '') as string | number
              }
              onChange={handleChange as (val: string) => void}
              placeholder={`Enter ${field.label.toLowerCase()}` as string}
            />
          );

        case 'select':
          return (
            <InputSelect
              id={fieldPath as string}
              value={(typeof value === 'string' ? value : '') as string}
              options={fieldOptions as string[]}
              onChange={handleChange as (val: string) => void}
              placeholder={`Select ${field.label.toLowerCase()}` as string}
            />
          );

        case 'checkbox':
          return (
            <InputCheckbox
              id={fieldPath as string}
              label={field.label as string}
              checked={Boolean(value) as boolean}
              onChange={handleChange as (val: boolean) => void}
            />
          );

        case 'radio':
          return (
            <InputRadio
              name={fieldPath as string}
              selectedValue={(typeof value === 'string' ? value : '') as string}
              options={fieldOptions as string[]}
              onChange={handleChange as (val: string) => void}
            />
          );

        case 'date':
          return (
            <InputDate
              id={fieldPath as string}
              value={(typeof value === 'string' ? value : '') as string}
              onChange={handleChange as (val: string) => void}
            />
          );

        case 'group':
          return (
            <FieldGroup
              label={field.label as string}
              fields={(field.fields ?? []) as FormFieldType[]}
              formData={formData as FormData}
              onUpdate={onUpdate as (key: string, value: any) => void}
              parentPath={fieldPath as string}
            />
          );

        default:
          return <UnsupportedField type={field.type as string} />;
      }
    })();

    /* -------------------------
       6. Render wrapper
    ------------------------- */
    if (field.type === 'group') {
      return <div className='space-y-4'>{renderField}</div>;
    }

    return (
      <div className='space-y-2'>
        {field.type !== 'checkbox' && (
          <label
            htmlFor={fieldPath}
            className='block text-sm font-medium leading-6 text-gray-900'
          >
            {field.label}
            {field.required && <span className='text-red-500 ml-1'>*</span>}
          </label>
        )}

        {renderField}
      </div>
    );
  }
);

FormField.displayName = 'FormField';



----- FILE: components\forms\FormField\inputs\FieldGroup.tsx -----

'use client';

import { FormData, FormField as FormFieldType } from '@/lib/types';
import React from 'react';
import { FormField } from '../FormField';

interface FieldGroupProps {
  label: string;
  fields: FormFieldType[];
  formData: FormData;
  onUpdate: (key: string, value: any) => void;
  parentPath?: string;
}

export const FieldGroup: React.FC<FieldGroupProps> = React.memo(
  ({ label, fields, formData, onUpdate, parentPath }) => {
    return (
      <div className='space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50'>
        {/* Group header */}
        <h3 className='text-lg font-medium text-gray-900'>{label}</h3>

        {/* Grouped fields */}
        <div className='space-y-4'>
          {fields.map(field => (
            <FormField
              key={field.key}
              field={field}
              formData={formData}
              onUpdate={onUpdate}
              parentPath={parentPath}
            />
          ))}
        </div>
      </div>
    );
  }
);

FieldGroup.displayName = 'FieldGroup';



----- FILE: components\forms\FormField\inputs\InputCheckbox.tsx -----

'use client';

import React, { useCallback } from 'react';

interface InputCheckboxProps {
  id: string;
  label: string;
  checked: boolean;
  onChange: (value: boolean) => void;
}

export const InputCheckbox: React.FC<InputCheckboxProps> = React.memo(
  ({ id, label, checked, onChange }) => {
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLInputElement>) => {
        onChange(event.target.checked);
      },
      [onChange]
    );

    return (
      <div className='flex items-center'>
        <input
          type='checkbox'
          id={id}
          checked={checked}
          onChange={handleChange}
          className='h-4 w-4 text-cyan-600 focus:ring-cyan-600 border-gray-300 rounded'
        />
        <label htmlFor={id} className='ml-2 block text-sm text-gray-900'>
          {label}
        </label>
      </div>
    );
  }
);

InputCheckbox.displayName = 'InputCheckbox';



----- FILE: components\forms\FormField\inputs\InputDate.tsx -----

'use client';

import React, { useCallback } from 'react';

interface InputDateProps {
  id: string;
  value: string;
  onChange: (value: string) => void;
}

export const InputDate: React.FC<InputDateProps> = React.memo(
  ({ id, value, onChange }) => {
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLInputElement>) => {
        onChange(event.target.value);
      },
      [onChange]
    );

    return (
      <input
        type='date'
        id={id}
        value={value}
        onChange={handleChange}
        className='block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 px-2 focus:ring-2 focus:ring-inset focus:ring-cyan-600 sm:text-sm sm:leading-6'
      />
    );
  }
);

InputDate.displayName = 'InputDate';



----- FILE: components\forms\FormField\inputs\InputNumber.tsx -----

'use client';

import React, { useCallback } from 'react';

interface InputNumberProps {
  id: string;
  value: string | number;
  onChange: (value: string) => void;
  placeholder?: string;
}

export const InputNumber: React.FC<InputNumberProps> = React.memo(
  ({ id, value, onChange, placeholder }) => {
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLInputElement>) => {
        onChange(event.target.value);
      },
      [onChange]
    );

    return (
      <input
        type='number'
        id={id}
        value={value}
        onChange={handleChange}
        placeholder={placeholder}
        className='block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 px-2 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-cyan-600 sm:text-sm sm:leading-6'
      />
    );
  }
);

InputNumber.displayName = 'InputNumber';



----- FILE: components\forms\FormField\inputs\InputRadio.tsx -----

'use client';

import React, { useCallback } from 'react';

interface InputRadioProps {
  name: string;
  selectedValue: string;
  options: string[];
  onChange: (value: string) => void;
}

export const InputRadio: React.FC<InputRadioProps> = React.memo(
  ({ name, selectedValue, options, onChange }) => {
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLInputElement>) => {
        onChange(event.target.value);
      },
      [onChange]
    );

    return (
      <div className='space-y-2'>
        {options.map(option => (
          <div key={option} className='flex items-center'>
            <input
              type='radio'
              id={`${name}-${option}`}
              name={name}
              value={option}
              checked={selectedValue === option}
              onChange={handleChange}
              className='h-4 w-4 text-cyan-600 focus:ring-cyan-600 border-gray-300'
            />
            <label
              htmlFor={`${name}-${option}`}
              className='ml-2 block text-sm text-gray-900'
            >
              {option}
            </label>
          </div>
        ))}
      </div>
    );
  }
);

InputRadio.displayName = 'InputRadio';



----- FILE: components\forms\FormField\inputs\InputSelect.tsx -----

'use client';

import React, { useCallback } from 'react';

interface InputSelectProps {
  id: string;
  value: string;
  options: string[];
  onChange: (value: string) => void;
  placeholder?: string;
}

export const InputSelect: React.FC<InputSelectProps> = React.memo(
  ({ id, value, options, onChange, placeholder }) => {
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLSelectElement>) => {
        onChange(event.target.value);
      },
      [onChange]
    );

    return (
      <select
        id={id}
        value={value}
        onChange={handleChange}
        className='block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 px-2 focus:ring-2 focus:ring-inset focus:ring-cyan-600 sm:text-sm sm:leading-6'
      >
        {placeholder && (
          <option value='' disabled>
            {placeholder}
          </option>
        )}
        {options.map(option => (
          <option key={option} value={option}>
            {option}
          </option>
        ))}
      </select>
    );
  }
);

InputSelect.displayName = 'InputSelect';



----- FILE: components\forms\FormField\inputs\InputText.tsx -----

'use client';

import React, { useCallback, useEffect, useState } from 'react';

interface InputTextProps {
  id: string;
  defaultValue?: string;
  onCommit: (value: string) => void;
  placeholder?: string;
  autoComplete?: string;
}

export const InputText: React.FC<InputTextProps> = React.memo(
  ({ id, defaultValue = '', onCommit, placeholder, autoComplete = 'off' }) => {
    /** Internal state for the input value */
    const [inputValue, setInputValue] = useState(defaultValue);

    /**
     * Handles input value changes
     *
     * Updates the internal state and immediately commits the new value
     * to the parent form for real-time validation and data management.
     *
     * @param event - Change event from the input element
     */
    const handleChange = useCallback(
      (event: React.ChangeEvent<HTMLInputElement>) => {
        const newValue = event.target.value;
        setInputValue(newValue);
        onCommit(newValue); // Immediately commit the value to parent form
      },
      [onCommit]
    );

    /**
     * Handles input blur events
     *
     * Commits the current input value when the user leaves the field,
     * ensuring the final value is captured even if it hasn't changed
     * since the last keystroke.
     */
    const handleBlur = useCallback(() => {
      onCommit(inputValue); // Also commit when leaving the field
    }, [onCommit, inputValue]);

    /**
     * Syncs internal state with external defaultValue changes
     *
     * This effect ensures that if the defaultValue prop changes
     * externally (e.g., from form reset or navigation), the internal
     * state is updated accordingly.
     */
    useEffect(() => {
      setInputValue(defaultValue);
    }, [defaultValue]);

    return (
      <input
        type='text'
        id={id}
        value={inputValue}
        onChange={handleChange}
        onBlur={handleBlur}
        placeholder={placeholder}
        autoComplete={autoComplete}
        className='block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 px-2 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-cyan-600 sm:text-sm sm:leading-6'
      />
    );
  }
);

InputText.displayName = 'InputText';



----- FILE: components\forms\FormField\inputs\UnsupportedField.tsx -----

'use client';

import React from 'react';

interface UnsupportedFieldProps {
  type: string;
}

export const UnsupportedField: React.FC<UnsupportedFieldProps> = ({ type }) => {
  return <div className='text-red-500'>Unsupported field type: {type}</div>;
};



----- FILE: components\forms\FormField\types.ts -----

import { FormData, FormField as FormFieldType } from '../../../lib/types';

export interface FormFieldProps {
  field: FormFieldType;
  formData: FormData;
  onUpdate: (key: string, value: any) => void;
  parentPath?: string;
}



----- FILE: components\forms\FormField\UnsupportedField.tsx -----

'use client';

import React from 'react';

interface UnsupportedFieldProps {
  type: string;
}

/**
 * Fallback component for unsupported field types
 *
 * This component is displayed when a form field has a type that is not
 * yet implemented in the form system. It provides a user-friendly
 * warning message with visual indicators to help developers identify
 * missing field type implementations.
 *
 * The component uses a yellow warning style to clearly indicate that
 * this is a development issue that needs attention, while still
 * allowing the form to render without crashing.
 *
 * @param props - Component properties
 * @param props.type - The unsupported field type that triggered this component
 *
 * @example
 * ```typescript
 * // This would render if a field has type: 'file' which isn't implemented
 * <UnsupportedField type="file" />
 * ```
 *
 * @example
 * ```typescript
 * // This would render if a field has type: 'textarea' which isn't implemented
 * <UnsupportedField type="textarea" />
 * ```
 */
export const UnsupportedField: React.FC<UnsupportedFieldProps> = React.memo(
  ({ type }) => {
    return (
      <div className='p-4 bg-yellow-50 border border-yellow-200 rounded-lg'>
        <div className='flex items-center'>
          {/* Warning icon */}
          <svg
            className='w-5 h-5 text-yellow-600 mr-2'
            fill='currentColor'
            viewBox='0 0 20 20'
          >
            <path
              fillRule='evenodd'
              d='M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z'
              clipRule='evenodd'
            />
          </svg>

          {/* Warning message */}
          <span className='text-sm text-yellow-800'>
            Field type "{type}" is not supported yet.
          </span>
        </div>
      </div>
    );
  }
);

UnsupportedField.displayName = 'UnsupportedField';



----- FILE: components\forms\FormNavigation\FormNavigation.tsx -----

'use client';

import { Button } from '@/components/ui/button';
import { FormNavigationProps } from '@/lib/types';
import { cn } from '@/lib/utils';
import React, { useCallback, useMemo } from 'react';
import { NextIcon } from './NextIcon';
import { PrevIcon } from './PrevIcon';
import { SpinnerIcon } from './SpinnerIcon';

export const FormNavigation: React.FC<FormNavigationProps> = React.memo(
  ({
    currentStep,
    totalSteps,
    canGoPrev,
    canGoNext,
    onPrev,
    onNext,
    onSubmit,
    isLoading = false,
  }) => {
    const isLastStep = useMemo(
      () => currentStep === totalSteps - 1,
      [currentStep, totalSteps]
    );
    const [isNavigating, setIsNavigating] = React.useState(false);

    const handleNext = useCallback(async () => {
      setIsNavigating(true);
      try {
        if (isLastStep) {
          await onSubmit();
        } else {
          await onNext();
        }
      } finally {
        setIsNavigating(false);
      }
    }, [isLastStep, onSubmit, onNext]);

    return (
      <div className='pt-8 border-t border-gradient-to-r from-transparent via-gray-200 to-transparent relative'>
        {/* Decorative line */}
        <div className='absolute top-0 left-1/2 transform -translate-x-1/2 w-24 h-0.5 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full'></div>

        <div className='flex items-center justify-between pt-2'>
          {/* Previous Button */}
          <Button
            type='button'
            variant='outline'
            onClick={onPrev}
            disabled={!canGoPrev || isLoading || isNavigating}
            className={cn(
              'flex items-center gap-3 px-6 py-3 rounded-xl font-semibold transition-all duration-300',
              'border-2 border-slate-300 hover:border-slate-400',
              'bg-white hover:bg-slate-50',
              'text-slate-700 hover:text-slate-800',
              'shadow-md hover:shadow-lg',
              'disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:border-slate-300',
              'group relative overflow-hidden'
            )}
          >
            {/* Button background effect */}
            <div className='absolute inset-0 bg-gradient-to-r from-slate-50 to-gray-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300'></div>

            <div className='relative z-10 flex items-center gap-3'>
              <div className='w-5 h-5 transition-transform duration-300 group-hover:-translate-x-0.5'>
                <PrevIcon />
              </div>
              <span>Previous</span>
            </div>
          </Button>

          {/* Progress indicator */}
          <div className='flex flex-col items-center space-y-2'>
            <div className='flex items-center gap-2 text-sm font-medium text-slate-600'>
              <span>Step</span>
              <div className='flex items-center space-x-1'>
                <span className='inline-flex items-center justify-center w-6 h-6 bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs font-bold rounded-full shadow-sm'>
                  {currentStep + 1}
                </span>
                <span className='text-slate-400'>of</span>
                <span className='inline-flex items-center justify-center w-6 h-6 bg-slate-200 text-slate-600 text-xs font-bold rounded-full'>
                  {totalSteps}
                </span>
              </div>
            </div>

            {/* Mini progress dots */}
            <div className='flex items-center space-x-1'>
              {Array.from({ length: totalSteps }).map((_, index) => (
                <div
                  key={index}
                  className={cn(
                    'w-2 h-2 rounded-full transition-all duration-300',
                    index <= currentStep
                      ? 'bg-gradient-to-r from-blue-400 to-cyan-400 shadow-sm'
                      : 'bg-slate-200'
                  )}
                />
              ))}
            </div>
          </div>

          {/* Next/Submit Button */}
          <Button
            type='button'
            onClick={handleNext}
            disabled={(!canGoNext && !isLastStep) || isLoading || isNavigating}
            className={cn(
              'flex items-center gap-3 px-6 py-3 rounded-xl font-semibold transition-all duration-300 min-w-[140px]',
              'shadow-lg hover:shadow-xl',
              'disabled:opacity-50 disabled:cursor-not-allowed',
              'group relative overflow-hidden',
              isLastStep
                ? 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white border-2 border-green-500 hover:border-green-600 shadow-green-500/30'
                : 'bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700 text-white border-2 border-blue-500 hover:border-blue-600 shadow-blue-500/30'
            )}
          >
            {/* Button glow effect */}
            <div
              className={cn(
                'absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-xl',
                isLastStep
                  ? 'bg-gradient-to-r from-green-400/20 to-emerald-500/20'
                  : 'bg-gradient-to-r from-blue-400/20 to-cyan-500/20'
              )}
            ></div>

            <div className='relative z-10 flex items-center gap-3'>
              {isNavigating ? (
                <>
                  <div className='w-5 h-5 animate-spin'>
                    <SpinnerIcon />
                  </div>
                  <span>{isLastStep ? 'Submitting...' : 'Processing...'}</span>
                </>
              ) : (
                <>
                  <span>{isLastStep ? 'Submit' : 'Next'}</span>
                  {isLastStep ? (
                    <div className='w-5 h-5'>
                      <svg
                        fill='currentColor'
                        viewBox='0 0 20 20'
                        className='w-5 h-5'
                      >
                        <path
                          fillRule='evenodd'
                          d='M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'
                          clipRule='evenodd'
                        />
                      </svg>
                    </div>
                  ) : (
                    <div className='w-5 h-5 transition-transform duration-300 group-hover:translate-x-0.5'>
                      <NextIcon />
                    </div>
                  )}
                </>
              )}
            </div>
          </Button>
        </div>
      </div>
    );
  }
);

FormNavigation.displayName = 'FormNavigation';



----- FILE: components\forms\FormNavigation\NextIcon.tsx -----

export const NextIcon = () => (
  <svg
    className='w-4 h-4'
    fill='none'
    stroke='currentColor'
    viewBox='0 0 24 24'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth={2}
      d='M9 5l7 7-7 7'
    />
  </svg>
);



----- FILE: components\forms\FormNavigation\PrevIcon.tsx -----

export const PrevIcon = () => (
  <svg
    className='w-4 h-4'
    fill='none'
    stroke='currentColor'
    viewBox='0 0 24 24'
  >
    <path
      strokeLinecap='round'
      strokeLinejoin='round'
      strokeWidth={2}
      d='M15 19l-7-7 7-7'
    />
  </svg>
);



----- FILE: components\forms\FormNavigation\SpinnerIcon.tsx -----

export const SpinnerIcon = () => (
  <svg className='animate-spin w-4 h-4' fill='none' viewBox='0 0 24 24'>
    <circle
      className='opacity-25'
      cx='12'
      cy='12'
      r='10'
      stroke='currentColor'
      strokeWidth='4'
    ></circle>
    <path
      className='opacity-75'
      fill='currentColor'
      d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'
    ></path>
  </svg>
);



----- FILE: components\forms\FormSteps.tsx -----

'use client';

import { cn } from '@/lib/utils';
import React from 'react';

interface FormStepsProps {
  steps: Array<{ title: string }>;
  currentStep: number;
}

/**
 * Progress indicator component showing the current step
 * and progress through the multi-step form
 */
export const FormSteps: React.FC<FormStepsProps> = React.memo(
  ({ steps, currentStep }) => {
    return (
      <nav aria-label='Progress' className='mb-0'>
        <ol role='list' className='flex items-center justify-between'>
          {steps.map((step, index) => (
            <li
              key={step.title}
              className={cn(
                'flex items-center',
                index < steps.length - 1 ? 'flex-1' : ''
              )}
            >
              <div className='flex items-center'>
                {/* Enhanced step indicator */}
                <div
                  className={cn(
                    'flex flex-shrink-0 h-12 w-12 items-center justify-center rounded-full text-sm font-bold transition-all duration-300 shadow-lg relative',
                    currentStep > index
                      ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-blue-500/30 scale-105'
                      : currentStep === index
                      ? 'bg-gradient-to-r from-white to-gray-50 text-blue-600 border-2 border-blue-500 shadow-blue-500/20 scale-110'
                      : 'bg-white/80 text-slate-600 border-2 border-slate-300 shadow-slate-200/50'
                  )}
                >
                  {/* Glow effect for active/completed steps */}
                  {currentStep >= index && (
                    <div
                      className={cn(
                        'absolute inset-0 rounded-full blur-md',
                        currentStep > index
                          ? 'bg-gradient-to-r from-blue-400/40 to-cyan-400/40'
                          : 'bg-blue-400/30'
                      )}
                    ></div>
                  )}

                  <div className='relative z-10'>
                    {currentStep > index ? (
                      <svg
                        className='h-6 w-6'
                        fill='currentColor'
                        viewBox='0 0 20 20'
                      >
                        <path
                          fillRule='evenodd'
                          d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z'
                          clipRule='evenodd'
                        />
                      </svg>
                    ) : (
                      <span className='font-bold'>{index + 1}</span>
                    )}
                  </div>
                </div>

                {/* Enhanced step title */}
                <div className='ml-4 min-w-0'>
                  <span
                    className={cn(
                      'text-sm font-semibold transition-all duration-300',
                      currentStep >= index
                        ? 'text-white drop-shadow-sm'
                        : 'text-blue-200/70'
                    )}
                  >
                    {step.title}
                  </span>
                </div>
              </div>

              {/* Enhanced connector line */}
              {index < steps.length - 1 && (
                <div className='ml-6 flex-1 relative'>
                  <div
                    className={cn(
                      'h-1 w-full transition-all duration-500 rounded-full relative overflow-hidden',
                      currentStep > index
                        ? 'bg-gradient-to-r from-blue-400 to-cyan-400 shadow-lg shadow-blue-400/30'
                        : 'bg-blue-200/30'
                    )}
                  >
                    {/* Animated progress fill */}
                    {currentStep > index && (
                      <div className='absolute inset-0 bg-gradient-to-r from-blue-300/50 to-cyan-300/50 animate-pulse'></div>
                    )}
                  </div>
                </div>
              )}
            </li>
          ))}
        </ol>
      </nav>
    );
  }
);

FormSteps.displayName = 'FormSteps';



----- FILE: components\forms\MultiStepForm.tsx -----

'use client';

import { useMultiStepForm } from '@/hooks/useMultiStepForm';
import rawFormSchema from '@/lib/form-schema.json';
import { FormSchema } from '@/lib/types';
import { AnimatePresence, motion } from 'framer-motion';
import React, { useCallback, useMemo, useState } from 'react';
import { slideVariants } from './animations/slideVariants';
import { FormNavigation } from './FormNavigation/FormNavigation';
import { FormSteps } from './FormSteps';
import { ReviewStep } from './ReviewStep';
import { StepContent } from './StepContent';

export const MultiStepForm: React.FC = () => {
  const {
    currentStep,
    totalSteps,
    formData,
    nextStep,
    prevStep,
    updateField,
    submitForm,
    canGoNext,
    canGoPrev,
  } = useMultiStepForm(rawFormSchema as FormSchema);

  const formSchema = rawFormSchema as FormSchema;

  // Only memoize expensive computations that don't change frequently
  const currentStepData = useMemo(
    () => formSchema.steps[currentStep],
    [currentStep] // formSchema.steps is static, so we don't need it in deps
  );

  const isReviewStep = useMemo(
    () => currentStep === totalSteps - 1,
    [currentStep, totalSteps]
  );

  const [direction, setDirection] = useState(0);

  // Only use useCallback for functions passed to memoized child components
  const handleNext = useCallback(async () => {
    setDirection(1);
    return await nextStep();
  }, [nextStep]);

  const handlePrev = useCallback(() => {
    setDirection(-1);
    prevStep();
  }, [prevStep]);

  // const handleUpdateField = (key: string, value: any) => {
  //   updateField(key, value);
  // };

  console.log('page rendered');

  return (
    <div className='w-full max-w-full sm:max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto'>
      {/* Main form container with glass morphism effect */}
      <div className='bg-white/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-white/20 overflow-hidden'>
        {/* Steps Header with enhanced gradient */}
        <div className='px-4 sm:px-6 md:px-8 py-6 sm:py-7 md:py-8 bg-gradient-to-r from-slate-800 via-blue-900 to-slate-800 relative overflow-hidden'>
          {/* Subtle pattern overlay */}
          <div className='absolute inset-0 bg-gradient-to-r from-blue-400/10 to-cyan-400/10'></div>
          <div className='absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_30%_50%,_rgba(59,130,246,0.15),transparent)]'></div>

          <div className='relative'>
            <FormSteps steps={formSchema.steps} currentStep={currentStep} />
          </div>
        </div>

        {/* Form Content with enhanced styling */}
        <div className='p-4 sm:p-6 md:p-8 lg:p-10 bg-gradient-to-b from-gray-50/50 to-white'>
          <AnimatePresence mode='wait' custom={direction}>
            <motion.div
              key={currentStep}
              custom={direction}
              variants={slideVariants}
              initial='enter'
              animate='center'
              exit='exit'
              transition={{
                x: { type: 'spring', stiffness: 300, damping: 30 },
                opacity: { duration: 0.2 },
              }}
              className='min-h-[300px] sm:min-h-[350px] md:min-h-[400px]'
            >
              {isReviewStep ? (
                <ReviewStep formSchema={formSchema} formData={formData} />
              ) : (
                <StepContent
                  currentStepData={currentStepData}
                  currentStep={currentStep}
                  totalSteps={totalSteps}
                  formData={formData}
                  updateField={updateField}
                />
              )}
            </motion.div>
          </AnimatePresence>

          {/* Navigation with modern styling */}
          <FormNavigation
            currentStep={currentStep}
            totalSteps={totalSteps}
            canGoNext={canGoNext}
            canGoPrev={canGoPrev}
            onPrev={handlePrev}
            onNext={handleNext}
            onSubmit={submitForm}
          />
        </div>
      </div>
    </div>
  );
};



----- FILE: components\forms\ReviewStep.tsx -----

import { FormSchema } from '@/lib/types';
import React from 'react';

interface ReviewStepProps {
  formSchema: FormSchema;
  formData: Record<string, any>;
}

export const ReviewStep: React.FC<ReviewStepProps> = React.memo(
  ({ formSchema, formData }) => (
    <div className='space-y-8'>
      {/* Enhanced header */}
      <div className='text-center'>
        <div className='inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full mb-4 shadow-lg shadow-blue-500/30'>
          <svg
            className='w-8 h-8 text-white'
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
          >
            <path
              strokeLinecap='round'
              strokeLinejoin='round'
              strokeWidth={2}
              d='M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z'
            />
          </svg>
        </div>
        <h2 className='text-3xl font-bold bg-gradient-to-r from-slate-800 to-blue-900 bg-clip-text text-transparent mb-3'>
          Review Your Information
        </h2>
        <p className='text-slate-600 text-lg'>
          Please review all the information before submitting
        </p>
      </div>

      {/* Enhanced review cards */}
      <div className='space-y-6'>
        {formSchema.steps.slice(0, -1).map((step, stepIndex) => (
          <div
            key={stepIndex}
            className='bg-gradient-to-r from-white to-gray-50/50 rounded-xl border border-gray-200/60 overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 hover:border-blue-200'
          >
            {/* Card header */}
            <div className='px-6 py-4 bg-gradient-to-r from-slate-50 to-blue-50/30 border-b border-gray-100'>
              <div className='flex items-center'>
                <div className='flex items-center justify-center w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full mr-3 shadow-md'>
                  <span className='text-white text-sm font-bold'>
                    {stepIndex + 1}
                  </span>
                </div>
                <h3 className='text-xl font-bold text-slate-800'>
                  {step.title}
                </h3>
              </div>
            </div>

            {/* Card content */}
            <div className='p-6'>
              <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
                {step.fields.map(field => {
                  const renderFieldValue = (field: any, parentPath = '') => {
                    const fieldPath = parentPath
                      ? `${parentPath}.${field.key}`
                      : field.key;
                    const value = fieldPath
                      .split('.')
                      .reduce(
                        (current: { [x: string]: any }, key: string | number) =>
                          current?.[key],
                        formData
                      );

                    if (field.type === 'group' && field.fields) {
                      return (
                        <div key={field.key} className='col-span-full'>
                          <div className='mb-4 p-4 bg-gradient-to-r from-blue-50/50 to-cyan-50/30 rounded-lg border border-blue-100/50'>
                            <h4 className='font-bold text-slate-800 mb-3 flex items-center'>
                              <div className='w-2 h-2 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full mr-2'></div>
                              {field.label}
                            </h4>
                            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                              {field.fields.map((subField: any) =>
                                renderFieldValue(subField, fieldPath)
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    }

                    if (value === undefined || value === null || value === '') {
                      return null;
                    }

                    return (
                      <div
                        key={fieldPath}
                        className='space-y-2 p-3 bg-white/60 rounded-lg border border-gray-100 hover:bg-white/80 transition-colors duration-200'
                      >
                        <dt className='text-sm font-semibold text-slate-600 uppercase tracking-wide'>
                          {field.label}
                        </dt>
                        <dd className='text-base text-slate-800 font-medium'>
                          {field.type === 'checkbox' ? (
                            value ? (
                              <span className='inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800'>
                                Yes
                              </span>
                            ) : (
                              <span className='inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800'>
                                No
                              </span>
                            )
                          ) : (
                            String(value)
                          )}
                        </dd>
                      </div>
                    );
                  };

                  return renderFieldValue(field);
                })}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Enhanced confirmation notice */}
      <div className='relative overflow-hidden bg-gradient-to-r from-blue-50 via-cyan-50/30 to-blue-50 border-2 border-blue-200/60 rounded-xl p-6 shadow-lg'>
        {/* Decorative background */}
        <div className='absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl'></div>
        <div className='absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-cyan-200/20 to-blue-200/20 rounded-full blur-xl'></div>

        <div className='relative flex items-start space-x-4'>
          <div className='flex-shrink-0'>
            <div className='flex items-center justify-center w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full shadow-lg shadow-blue-500/30'>
              <svg
                className='w-5 h-5 text-white'
                fill='currentColor'
                viewBox='0 0 20 20'
              >
                <path
                  fillRule='evenodd'
                  d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z'
                  clipRule='evenodd'
                />
              </svg>
            </div>
          </div>
          <div>
            <h4 className='font-bold text-blue-900 mb-2'>Important Notice</h4>
            <p className='text-blue-800 leading-relaxed'>
              By submitting this form, you confirm that all information provided
              is accurate and complete. Please ensure all details are correct
              before proceeding.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
);

ReviewStep.displayName = 'ReviewStep';



----- FILE: components\forms\StepContent.tsx -----

import { FormData, FormStep } from '@/lib/types';
import React from 'react';
import { FormField } from './FormField/FormField';

interface StepContentProps {
  currentStepData: FormStep;
  currentStep: number;
  totalSteps: number;
  formData: FormData;
  updateField: (key: string, value: any) => void;
}

/**
 * Renders the content for a specific step in the multi-step form
 *
 * This component is responsible for displaying the current step's fields
 * and step information. It serves as the main content area for each step,
 * rendering individual FormField components for each field defined in the step schema.
 *
 * The component provides:
 * - Step title and progress indicator
 * - Dynamic field rendering based on step schema
 * - Consistent layout and styling for all steps
 *
 * @param props - Component properties
 * @param props.currentStepData - Schema definition for the current step
 * @param props.currentStep - Current step index (0-based)
 * @param props.totalSteps - Total number of steps in the form
 * @param props.formData - Current form data for field values
 * @param props.updateField - Function to update field values
 *
 * @example
 * ```typescript
 * <StepContent
 *   currentStepData={formSchema.steps[0]}
 *   currentStep={0}
 *   totalSteps={3}
 *   formData={formData}
 *   updateField={updateField}
 * />
 * ```
 */
export const StepContent: React.FC<StepContentProps> = React.memo(
  ({ currentStepData, currentStep, totalSteps, formData, updateField }) => {
    console.log('StepContent rendered');
    return (
      <div className='space-y-8'>
        {/* Enhanced step header */}
        <div className='text-center relative'>
          {/* Decorative elements */}
          <div className='absolute -top-4 left-1/2 transform -translate-x-1/2 w-20 h-1 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-full'></div>

          <div className='pt-4'>
            <h2 className='text-3xl font-bold bg-gradient-to-r from-slate-800 to-blue-900 bg-clip-text text-transparent mb-3'>
              {currentStepData.title}
            </h2>

            {/* Enhanced progress indicator */}
            <div className='flex items-center justify-center space-x-3 mb-4'>
              <span className='text-slate-600 font-medium'>Step</span>
              <div className='flex items-center space-x-2'>
                <span className='inline-flex items-center justify-center w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-sm font-bold rounded-full shadow-lg shadow-blue-500/30'>
                  {currentStep + 1}
                </span>
                <span className='text-slate-400 font-medium'>of</span>
                <span className='inline-flex items-center justify-center w-8 h-8 bg-slate-200 text-slate-600 text-sm font-bold rounded-full'>
                  {totalSteps - 1}
                </span>
              </div>
            </div>

            {/* Progress bar */}
            <div className='max-w-md mx-auto'>
              <div className='flex items-center justify-between text-xs text-slate-500 mb-2'>
                <span>Progress</span>
                <span>
                  {Math.round(((currentStep + 1) / (totalSteps - 1)) * 100)}%
                </span>
              </div>
              <div className='w-full bg-slate-200 rounded-full h-2 overflow-hidden'>
                <div
                  className='h-2 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full transition-all duration-500 ease-out shadow-lg'
                  style={{
                    width: `${((currentStep + 1) / (totalSteps - 1)) * 100}%`,
                  }}
                >
                  <div className='h-full bg-gradient-to-r from-blue-300/50 to-cyan-300/50 animate-pulse'></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced form fields container */}
        <div className='bg-gradient-to-b from-white to-gray-50/30 rounded-xl border border-gray-200/60 p-6 md:p-8 shadow-lg'>
          <div className='space-y-8'>
            {currentStepData.fields.map((field, index) => (
              <div
                key={field.key}
                className='group relative'
                style={{ animationDelay: `${index * 100}ms` }}
              >
                {/* Field container with enhanced styling */}
                <div className='relative bg-white/80 rounded-lg border border-gray-200/60 p-4 hover:border-blue-200 hover:shadow-md transition-all duration-300 hover:bg-white'>
                  {/* Subtle gradient overlay on hover */}
                  <div className='absolute inset-0 bg-gradient-to-r from-blue-50/0 to-cyan-50/0 group-hover:from-blue-50/30 group-hover:to-cyan-50/20 rounded-lg transition-all duration-300 pointer-events-none'></div>

                  <div className='relative z-10'>
                    <FormField
                      field={field}
                      formData={formData}
                      onUpdate={updateField}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Helpful tip section */}
        <div className='bg-gradient-to-r from-cyan-50/50 via-blue-50/30 to-cyan-50/50 border border-cyan-200/60 rounded-xl p-5 relative overflow-hidden'>
          <div className='absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl'></div>
          <div className='relative flex items-start space-x-3'>
            <div className='flex-shrink-0 w-8 h-8 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full flex items-center justify-center shadow-lg shadow-cyan-400/30'>
              <svg
                className='w-4 h-4 text-white'
                fill='currentColor'
                viewBox='0 0 20 20'
              >
                <path
                  fillRule='evenodd'
                  d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z'
                  clipRule='evenodd'
                />
              </svg>
            </div>
            <div>
              <h4 className='font-semibold text-slate-800 mb-1'>Helpful Tip</h4>
              <p className='text-sm text-slate-600'>
                Take your time to fill out all fields accurately. You can always
                go back to previous steps if needed.
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }
);

StepContent.displayName = 'StepContent';



----- FILE: components\ui\button.tsx -----

'use client';

import { cn } from '@/lib/utils';
import React from 'react';

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?:
    | 'default'
    | 'destructive'
    | 'outline'
    | 'secondary'
    | 'ghost'
    | 'link';
  size?: 'default' | 'sm' | 'lg' | 'icon';
}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    return (
      <button
        className={cn(
          'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
          {
            'bg-primary text-primary-foreground hover:bg-primary/90':
              variant === 'default',
            'bg-destructive text-destructive-foreground hover:bg-destructive/90':
              variant === 'destructive',
            'border border-input bg-background hover:bg-accent hover:text-accent-foreground':
              variant === 'outline',
            'bg-secondary text-secondary-foreground hover:bg-secondary/80':
              variant === 'secondary',
            'hover:bg-accent hover:text-accent-foreground': variant === 'ghost',
            'text-primary underline-offset-4 hover:underline':
              variant === 'link',
          },
          {
            'h-10 px-4 py-2': size === 'default',
            'h-9 rounded-md px-3': size === 'sm',
            'h-11 rounded-md px-8': size === 'lg',
            'h-10 w-10': size === 'icon',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';



----- FILE: hooks\useMultiStepForm.ts -----

'use client';

import { FormData, FormSchema, UseMultiStepFormReturn } from '@/lib/types';
import { useCallback, useMemo, useState } from 'react';

/**
 * Simplified custom hook for managing multi-step form state and logic
 */
export const useMultiStepForm = (
  schema: FormSchema
): UseMultiStepFormReturn => {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState<FormData>({});
  const totalSteps = schema.steps.length;

  /**
   * Updates a specific field in the form data
   */
  const updateField = useCallback((key: string, value: any) => {
    setFormData(prev => {
      const newData = { ...prev };
      const keys = key.split('.');
      let current = newData;

      for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
          current[keys[i]] = {};
        }
        current = current[keys[i]];
      }

      current[keys[keys.length - 1]] = value;
      return newData;
    });
  }, []);

  /**
   * Moves to the next step
   */
  const nextStep = useCallback(async (): Promise<boolean> => {
    if (currentStep >= totalSteps - 1) return false;
    setCurrentStep(prev => Math.min(prev + 1, totalSteps - 1));
    return true;
  }, [currentStep, totalSteps]);

  /**
   * Moves to the previous step
   */
  const prevStep = useCallback(() => {
    setCurrentStep(prev => Math.max(prev - 1, 0));
  }, []);

  /**
   * Jumps to a specific step by index
   */
  const goToStep = useCallback(
    (stepIndex: number) => {
      if (stepIndex >= 0 && stepIndex < totalSteps) {
        setCurrentStep(stepIndex);
      }
    },
    [totalSteps]
  );

  /**
   * Resets the form to its initial state
   */
  const resetForm = useCallback(() => {
    setCurrentStep(0);
    setFormData({});
  }, []);

  /**
   * Submits the final form data
   */
  const submitForm = useCallback(async (): Promise<FormData | null> => {
    // Show alert to user
    alert(
      'Form submitted successfully! Check the browser console to see your data.'
    );

    // Log the form data to console
    console.log('✅ Form submitted successfully!');
    console.log('📊 Form Data (JSON):', JSON.stringify(formData, null, 2));

    return formData;
  }, [formData]);

  // Computed properties
  const isValid = useMemo(() => {
    return true; // Always valid since no validation is implemented
  }, []);

  const canGoNext = useMemo(() => {
    return currentStep < totalSteps - 1;
  }, [currentStep, totalSteps]);

  const canGoPrev = useMemo(() => {
    return currentStep > 0;
  }, [currentStep]);

  const canSubmit = useMemo(() => {
    return currentStep === totalSteps - 1;
  }, [currentStep, totalSteps]);

  return {
    currentStep,
    totalSteps,
    formData,
    isValid,
    canGoNext,
    canGoPrev,
    canSubmit,
    updateField,
    nextStep,
    prevStep,
    goToStep,
    resetForm,
    submitForm,
  };
};



----- FILE: jest.config.js -----

const nextJest = require('next/jest');

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files
  dir: './',
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jsdom',
  testPathIgnorePatterns: ['<rootDir>/.next/', '<rootDir>/node_modules/'],
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/$1',
  },
  collectCoverageFrom: [
    'components/**/*.{ts,tsx}',
    'hooks/**/*.{ts,tsx}',
    'lib/**/*.{ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);



----- FILE: jest.setup.js -----

import '@testing-library/jest-dom';

// Mock Next.js router
jest.mock('next/navigation', () => ({
  useRouter() {
    return {
      push: jest.fn(),
      replace: jest.fn(),
      prefetch: jest.fn(),
      back: jest.fn(),
      forward: jest.fn(),
      refresh: jest.fn(),
    };
  },
  useSearchParams() {
    return new URLSearchParams();
  },
  usePathname() {
    return '/';
  },
}));

// Mock console methods in tests to reduce noise
global.console = {
  ...console,
  // Uncomment to ignore a specific log level
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  warn: jest.fn(),
  error: jest.fn(),
};

// Global test timeout
jest.setTimeout(10000);



----- FILE: lib\form-schema.json -----

{
  "steps": [
    {
      "title": "User Details",
      "fields": [
        {
          "key": "fullName",
          "label": "Full Name",
          "type": "text",
          "required": true
        },
        {
          "key": "email",
          "label": "Email",
          "type": "text",
          "required": true
        },
        {
          "key": "phone",
          "label": "Phone Number",
          "type": "group",
          "fields": [
            {
              "key": "countryCode",
              "label": "Country Code",
              "type": "select",
              "options": ["+971", "+966", "+1", "+44"],
              "required": true
            },
            {
              "key": "number",
              "label": "Phone Number",
              "type": "text",
              "required": true
            }
          ]
        }
      ]
    },
    {
      "title": "Property Info",
      "fields": [
        {
          "key": "propertyType",
          "label": "Property Type",
          "type": "select",
          "options": ["Residential", "Commercial"],
          "required": true
        },
        {
          "key": "category",
          "label": "Category",
          "type": "select",
          "required": true,
          "optionSource": {
            "key": "propertyType",
            "map": {
              "Residential": ["Apartment", "Villa"],
              "Commercial": ["Office", "Retail", "Warehouse"]
            }
          },
          "dependencies": [
            {
              "key": "propertyType",
              "notEmpty": true
            }
          ]
        },
        {
          "key": "subCategory",
          "label": "Subcategory",
          "type": "select",
          "required": true,
          "optionSource": {
            "key": "category",
            "map": {
              "Apartment": ["Studio", "1BR", "2BR", "Penthouse"],
              "Villa": ["3BR", "4BR", "5BR+"],
              "Office": ["Shell & Core", "Fitted", "Partitioned"],
              "Retail": ["Street-Facing", "Mall-Unit"],
              "Warehouse": ["Cold Storage", "Dry Storage"]
            }
          },
          "dependencies": [
            {
              "key": "category",
              "notEmpty": true
            }
          ]
        },
        {
          "key": "size",
          "label": "Size (sqm)",
          "type": "number",
          "required": true
        }
      ]
    },
    {
      "title": "Location & Amenities",
      "fields": [
        {
          "key": "location",
          "label": "Location",
          "type": "text",
          "required": true
        },
        {
          "key": "hasParking",
          "label": "Parking Available?",
          "type": "checkbox"
        },
        {
          "key": "parkingSpots",
          "label": "Number of Parking Spots",
          "type": "number",
          "dependencies": [
            {
              "key": "hasParking",
              "equals": true
            }
          ]
        },
        {
          "key": "amenities",
          "label": "Amenities",
          "type": "group",
          "fields": [
            {
              "key": "hasPool",
              "label": "Pool",
              "type": "checkbox"
            },
            {
              "key": "hasGym",
              "label": "Gym",
              "type": "checkbox"
            },
            {
              "key": "hasBalcony",
              "label": "Balcony",
              "type": "checkbox"
            }
          ]
        }
      ]
    },
    {
      "title": "Review & Submit",
      "fields": []
    }
  ]
}



----- FILE: lib\types.ts -----

/**
 * Core type definitions for the multi-step form system
 */

export type FieldType =
  | 'text'
  | 'number'
  | 'select'
  | 'checkbox'
  | 'radio'
  | 'date'
  | 'group';

export interface FormDependency {
  key: string;
  equals?: any;
  notEmpty?: boolean;
}

export interface OptionSource {
  key: string;
  map: Record<string, string[]>;
}

export interface FormField {
  key: string;
  label: string;
  type: FieldType;
  required?: boolean;
  options?: string[];
  optionSource?: OptionSource;
  dependencies?: FormDependency[];
  fields?: FormField[]; // For group type
}

export interface FormStep {
  title: string;
  fields: FormField[];
}

export interface FormSchema {
  steps: FormStep[];
}

/**
 * Form data type - dynamically generated based on schema
 */
export type FormData = Record<string, any>;

/**
 * Hook return type for form management
 *
 * Provides comprehensive form state and control functions for multi-step forms
 */
export interface UseMultiStepFormReturn {
  /** Current step index (0-based) */
  currentStep: number;
  /** Total number of steps in the form */
  totalSteps: number;
  /** Form data object with nested field support */
  formData: FormData;
  /** Whether the current step is valid */
  isValid: boolean;
  /** Whether the user can proceed to the next step */
  canGoNext: boolean;
  /** Whether the user can go to the previous step */
  canGoPrev: boolean;
  /** Whether the user can submit the form */
  canSubmit: boolean;
  /** Function to update a specific field value */
  updateField: (key: string, value: any) => void;
  /** Function to move to next step */
  nextStep: () => Promise<boolean>;
  /** Function to move to previous step */
  prevStep: () => void;
  /** Function to jump to a specific step */
  goToStep: (stepIndex: number) => void;
  /** Function to reset form to initial state */
  resetForm: () => void;
  /** Function to submit the final form data */
  submitForm: () => Promise<FormData | null>;
}

/**
 * Form Navigation component props
 */
export interface FormNavigationProps {
  currentStep: number;
  totalSteps: number;
  canGoPrev: boolean;
  canGoNext: boolean;
  /** Function to go to previous step */
  onPrev: () => void;
  /** Function to go to next step - returns success boolean */
  onNext: () => Promise<boolean>;
  /** Function to submit form - FIXED: Returns FormData | null to match hook */
  onSubmit: () => Promise<FormData | null>;
  isLoading?: boolean;
}

/**
 * Form Field component props
 */
export interface FormFieldProps {
  field: FormField;
  formData: FormData;
  onUpdate: (key: string, value: any) => void;
  parentPath?: string;
}



----- FILE: lib\utils.ts -----

import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

/**
 * Utility function to merge Tailwind CSS classes
 * Combines clsx and tailwind-merge for optimal class handling
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

/**
 * Debounce utility for performance optimization
 */
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}



----- FILE: next.config.ts -----

import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  reactStrictMode: false,
  experimental: {},
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
};

export default nextConfig;



----- FILE: scripts\generateContent.js -----

const fs = require('fs');
const path = require('path');

// Allowed file extensions for code/content files only
const allowedExtensions = new Set([
  '.ts',
  '.tsx',
  '.js',
  '.jsx',
  '.json',
  '.css',
  '.mjs',
  '.cjs',
  '.md',
  '.html',
  '.d.ts',
  '.json',
  '.mjs',
  '.cjs',
  '.mjs',
  '.mjs',
  '.mjs',
]);

// Ignore these folders completely
const ignoreFolders = new Set(['node_modules', '.next', 'public', '.git']);

// Ignore these files explicitly (non-code files in root)
const ignoreFiles = new Set([
  'package-lock.json',
  'package.json',
  'README.md',
  'tailwind.config.js',
  'postcss.config.mjs',
  'eslint.config.mjs',
  'next-env.d.ts',
  'tsconfig.json',
  'tsconfig.scripts.json',
  'structureGeneration.ts',
]);

function gatherFiles(dir, baseDir = dir) {
  if (ignoreFolders.has(path.basename(dir))) return [];

  let files = [];
  const entries = fs
    .readdirSync(dir, { withFileTypes: true })
    .filter(entry => !ignoreFiles.has(entry.name));

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      files = files.concat(gatherFiles(fullPath, baseDir));
    } else if (entry.isFile()) {
      // Check extension + also exclude root-level ignored files
      if (allowedExtensions.has(path.extname(entry.name))) {
        files.push(fullPath);
      }
    }
  }
  return files;
}

const rootDir = process.cwd();
const outputFile = path.join(rootDir, 'project-content.txt');

const files = gatherFiles(rootDir);

const writeStream = fs.createWriteStream(outputFile, { encoding: 'utf-8' });

for (const filePath of files) {
  const relPath = path.relative(rootDir, filePath);
  const content = fs.readFileSync(filePath, 'utf-8');

  writeStream.write(`----- FILE: ${relPath} -----\n\n`);
  writeStream.write(content);
  writeStream.write(`\n\n\n`);
}

writeStream.end(() => {
  console.log(`✅ All code file contents written to ${outputFile}`);
});



----- FILE: scripts\generateStructure.js -----

const fs = require('fs');
const path = require('path');

const ignoreFolders = new Set(['node_modules', '.git', '.next']);
const ignoreFiles = new Set(['.gitignore']);

function generateTree(dir, prefix = '') {
  if (ignoreFolders.has(path.basename(dir))) return '';

  const entries = fs
    .readdirSync(dir, { withFileTypes: true })
    .filter(entry => !ignoreFiles.has(entry.name))
    .sort((a, b) => a.name.localeCompare(b.name));

  let tree = '';
  entries.forEach((entry, index) => {
    const isLast = index === entries.length - 1;
    const pointer = isLast ? '└── ' : '├── ';
    tree += `${prefix}${pointer}${entry.name}\n`;

    if (entry.isDirectory()) {
      const newPrefix = prefix + (isLast ? '    ' : '│   ');
      tree += generateTree(path.join(dir, entry.name), newPrefix);
    }
  });

  return tree;
}

const rootDir = process.cwd();
const outputFile = path.join(rootDir, 'project-structure.txt');

const treeStr = generateTree(rootDir);
fs.writeFileSync(outputFile, treeStr);

console.log(`✅ Project structure saved to ${outputFile}`);



